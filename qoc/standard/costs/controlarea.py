"""
controlarea.py - This module defines a cost function that penalizes
the "area under the curve" of the control parameters.
"""

import autograd.numpy as anp
import numpy as np

from qoc.models import (Cost,)

class ControlArea(Cost):
    """
    This cost penalizes the area under the
    function of time generated by the discrete control parameters.
    
    Fields:
    cost_multiplier
    name
    requires_step_evaluation
    type
    """
    name = "control_area"
    requires_step_evaluation = False
    type = "control_explicit_related"
    def __init__(self, cost_multiplier=1.,):
        """
        See class fields for arguments not listed here.
        
        Aruments:
        cost_multiplier
        """
        super().__init__(cost_multiplier=cost_multiplier)

    def cost(self, controls, states, gradients_method):
        """
        Compute the penalty.

        Arguments:
        controls
        states
        gradients_method
        
        Returns:
        cost
        """

        # The cost is the discrete integral of each control parameter
        # over the evolution time.
        cost = 0
        control_count = len(controls)
        for i in range(control_count):
            cost = cost + anp.abs(anp.sum(controls[i]))
        self.cost_value = cost * self.cost_multiplier
        return self.cost_value
